schema {
  query: Query
  mutation: Mutation
}
"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime
"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date
type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}
type DeleteMutationResponse {
  documentId: ID!
}
type ComponentPageRibbon {
  id: ID!
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}
type ComponentPageButton {
  id: ID!
  label: String!
  link: String!
}
type UploadFile {
  documentId: ID!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!
  pageInfo: Pagination!
}
type UploadFileRelationResponseCollection {
  nodes: [UploadFile!]!
}
type I18NLocale {
  documentId: ID!
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflow {
  documentId: ID!
  name: String!
  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
  contentTypes: JSON!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflowStage {
  documentId: ID!
  name: String
  color: String
  workflow: ReviewWorkflowsWorkflow
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
  pageInfo: Pagination!
}
type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}
type UsersPermissionsPermission {
  documentId: ID!
  action: String!
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}
type UsersPermissionsRole {
  documentId: ID!
  name: String!
  description: String
  type: String
  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!
  pageInfo: Pagination!
}
type UsersPermissionsUser {
  documentId: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}
type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!
  pageInfo: Pagination!
}
type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}
type Banner {
  documentId: ID!
  image: UploadFile!
  title: String!
  subtitle: String!
  button: ComponentPageButton
  ribbon: ComponentPageRibbon
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type BannerEntityResponseCollection {
  nodes: [Banner!]!
  pageInfo: Pagination!
}
type Category {
  documentId: ID!
  name: String!
  slug: String
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type CategoryEntityResponseCollection {
  nodes: [Category!]!
  pageInfo: Pagination!
}
type CategoryRelationResponseCollection {
  nodes: [Category!]!
}
type Developer {
  documentId: ID!
  name: String!
  slug: String
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type DeveloperEntityResponseCollection {
  nodes: [Developer!]!
  pageInfo: Pagination!
}
type DeveloperRelationResponseCollection {
  nodes: [Developer!]!
}
type Game {
  documentId: ID!
  name: String!
  slug: String
  short_description: String
  price: Float!
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: UploadFile
  gallery_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
  categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Category]!
  platforms_connection(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PlatformRelationResponseCollection
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Platform]!
  developers_connection(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DeveloperRelationResponseCollection
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Developer]!
  publisher: Publisher
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type GameEntityResponseCollection {
  nodes: [Game!]!
  pageInfo: Pagination!
}
type GameRelationResponseCollection {
  nodes: [Game!]!
}
type Platform {
  documentId: ID!
  name: String!
  slug: String
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type PlatformEntityResponseCollection {
  nodes: [Platform!]!
  pageInfo: Pagination!
}
type PlatformRelationResponseCollection {
  nodes: [Platform!]!
}
type Publisher {
  documentId: ID!
  name: String!
  slug: String
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GameRelationResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [Game]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}
type PublisherEntityResponseCollection {
  nodes: [Publisher!]!
  pageInfo: Pagination!
}
type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}
type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}
type UsersPermissionsPasswordPayload {
  ok: Boolean!
}
type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}
type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}
type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}
type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}
type Query {
  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
  banner(documentId: ID!, status: PublicationStatus = PUBLISHED): Banner
  banners_connection(filters: BannerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): BannerEntityResponseCollection
  banners(filters: BannerFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Banner]!
  category(documentId: ID!, status: PublicationStatus = PUBLISHED): Category
  categories_connection(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): CategoryEntityResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Category]!
  developer(documentId: ID!, status: PublicationStatus = PUBLISHED): Developer
  developers_connection(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): DeveloperEntityResponseCollection
  developers(filters: DeveloperFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Developer]!
  game(documentId: ID!, status: PublicationStatus = PUBLISHED): Game
  games_connection(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): GameEntityResponseCollection
  games(filters: GameFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Game]!
  platform(documentId: ID!, status: PublicationStatus = PUBLISHED): Platform
  platforms_connection(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): PlatformEntityResponseCollection
  platforms(filters: PlatformFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Platform]!
  publisher(documentId: ID!, status: PublicationStatus = PUBLISHED): Publisher
  publishers_connection(filters: PublisherFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): PublisherEntityResponseCollection
  publishers(filters: PublisherFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [Publisher]!
  me: UsersPermissionsMe
}
type Mutation {
  createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow
  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
  createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage
  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
  createBanner(status: PublicationStatus = PUBLISHED, data: BannerInput!): Banner
  updateBanner(documentId: ID!, status: PublicationStatus = PUBLISHED, data: BannerInput!): Banner
  deleteBanner(documentId: ID!): DeleteMutationResponse
  createCategory(status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
  updateCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: CategoryInput!): Category
  deleteCategory(documentId: ID!): DeleteMutationResponse
  createDeveloper(status: PublicationStatus = PUBLISHED, data: DeveloperInput!): Developer
  updateDeveloper(documentId: ID!, status: PublicationStatus = PUBLISHED, data: DeveloperInput!): Developer
  deleteDeveloper(documentId: ID!): DeleteMutationResponse
  createGame(status: PublicationStatus = PUBLISHED, data: GameInput!): Game
  updateGame(documentId: ID!, status: PublicationStatus = PUBLISHED, data: GameInput!): Game
  deleteGame(documentId: ID!): DeleteMutationResponse
  createPlatform(status: PublicationStatus = PUBLISHED, data: PlatformInput!): Platform
  updatePlatform(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PlatformInput!): Platform
  deletePlatform(documentId: ID!): DeleteMutationResponse
  createPublisher(status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher
  updatePublisher(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher
  deletePublisher(documentId: ID!): DeleteMutationResponse
  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
  deleteUploadFile(id: ID!): UploadFile
  "Create a new role"
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  "Update an existing role"
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  "Delete an existing role"
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  "Create a new user"
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  "Update an existing user"
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  "Delete an existing user"
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  "Register a user"
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  "Request a reset password token"
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  "Reset user password. Confirm with a code (resetToken from forgotPassword)"
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  "Change user password. Confirm with the current password."
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  "Confirm an email users email address"
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
union GenericMorph = ComponentPageRibbon | ComponentPageButton | UploadFile | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Banner | Category | Developer | Game | Platform | Publisher
enum PublicationStatus {
  DRAFT
  PUBLISHED
}
enum ENUM_COMPONENTPAGERIBBON_COLOR {
  primary
  secondary
}
enum ENUM_COMPONENTPAGERIBBON_SIZE {
  small
  normal
}
enum ENUM_GAME_RATING {
  BR0
  BR10
  BR12
  BR14
  BR16
  BR18
}
input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  eqi: ID
  ne: ID
  nei: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}
input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  eqi: Boolean
  ne: Boolean
  nei: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}
input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  eqi: String
  ne: String
  nei: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}
input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  eqi: Int
  ne: Int
  nei: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}
input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  eqi: Float
  ne: Float
  nei: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}
input DateFilterInput {
  and: [Date]
  or: [Date]
  not: DateFilterInput
  eq: Date
  eqi: Date
  ne: Date
  nei: Date
  startsWith: Date
  endsWith: Date
  contains: Date
  notContains: Date
  containsi: Date
  notContainsi: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  null: Boolean
  notNull: Boolean
  in: [Date]
  notIn: [Date]
  between: [Date]
}
input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  eqi: DateTime
  ne: DateTime
  nei: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}
input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  eqi: JSON
  ne: JSON
  nei: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}
input ComponentPageRibbonFiltersInput {
  text: StringFilterInput
  color: StringFilterInput
  size: StringFilterInput
  and: [ComponentPageRibbonFiltersInput]
  or: [ComponentPageRibbonFiltersInput]
  not: ComponentPageRibbonFiltersInput
}
input ComponentPageRibbonInput {
  id: ID
  text: String
  color: ENUM_COMPONENTPAGERIBBON_COLOR
  size: ENUM_COMPONENTPAGERIBBON_SIZE
}
input ComponentPageButtonFiltersInput {
  label: StringFilterInput
  link: StringFilterInput
  and: [ComponentPageButtonFiltersInput]
  or: [ComponentPageButtonFiltersInput]
  not: ComponentPageButtonFiltersInput
}
input ComponentPageButtonInput {
  id: ID
  label: String
  link: String
}
input UploadFileFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: UploadFileFiltersInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}
input I18NLocaleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: I18NLocaleFiltersInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}
input ReviewWorkflowsWorkflowFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  stages: ReviewWorkflowsWorkflowStageFiltersInput
  contentTypes: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: ReviewWorkflowsWorkflowFiltersInput
  and: [ReviewWorkflowsWorkflowFiltersInput]
  or: [ReviewWorkflowsWorkflowFiltersInput]
  not: ReviewWorkflowsWorkflowFiltersInput
}
input ReviewWorkflowsWorkflowInput {
  name: String
  stages: [ID]
  contentTypes: JSON
  publishedAt: DateTime
  locale: String
}
input ReviewWorkflowsWorkflowStageFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  workflow: ReviewWorkflowsWorkflowFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: ReviewWorkflowsWorkflowStageFiltersInput
  and: [ReviewWorkflowsWorkflowStageFiltersInput]
  or: [ReviewWorkflowsWorkflowStageFiltersInput]
  not: ReviewWorkflowsWorkflowStageFiltersInput
}
input ReviewWorkflowsWorkflowStageInput {
  name: String
  color: String
  workflow: ID
  publishedAt: DateTime
  locale: String
}
input UsersPermissionsPermissionFiltersInput {
  documentId: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: UsersPermissionsPermissionFiltersInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}
input UsersPermissionsRoleFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: UsersPermissionsRoleFiltersInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}
input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  publishedAt: DateTime
  locale: String
}
input UsersPermissionsUserFiltersInput {
  documentId: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: UsersPermissionsUserFiltersInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}
input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  publishedAt: DateTime
  locale: String
}
input BannerFiltersInput {
  documentId: IDFilterInput
  title: StringFilterInput
  subtitle: StringFilterInput
  button: ComponentPageButtonFiltersInput
  ribbon: ComponentPageRibbonFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: BannerFiltersInput
  and: [BannerFiltersInput]
  or: [BannerFiltersInput]
  not: BannerFiltersInput
}
input BannerInput {
  image: ID
  title: String
  subtitle: String
  button: ComponentPageButtonInput
  ribbon: ComponentPageRibbonInput
  publishedAt: DateTime
  locale: String
}
input CategoryFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: CategoryFiltersInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}
input CategoryInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
  locale: String
}
input DeveloperFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: DeveloperFiltersInput
  and: [DeveloperFiltersInput]
  or: [DeveloperFiltersInput]
  not: DeveloperFiltersInput
}
input DeveloperInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
  locale: String
}
input GameFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  short_description: StringFilterInput
  price: FloatFilterInput
  release_date: DateFilterInput
  rating: StringFilterInput
  categories: CategoryFiltersInput
  platforms: PlatformFiltersInput
  developers: DeveloperFiltersInput
  publisher: PublisherFiltersInput
  description: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: GameFiltersInput
  and: [GameFiltersInput]
  or: [GameFiltersInput]
  not: GameFiltersInput
}
input GameInput {
  name: String
  slug: String
  short_description: String
  price: Float
  release_date: Date
  rating: ENUM_GAME_RATING
  cover: ID
  gallery: [ID]
  categories: [ID]
  platforms: [ID]
  developers: [ID]
  publisher: ID
  description: String
  publishedAt: DateTime
  locale: String
}
input PlatformFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: PlatformFiltersInput
  and: [PlatformFiltersInput]
  or: [PlatformFiltersInput]
  not: PlatformFiltersInput
}
input PlatformInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
  locale: String
}
input PublisherFiltersInput {
  documentId: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  games: GameFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: PublisherFiltersInput
  and: [PublisherFiltersInput]
  or: [PublisherFiltersInput]
  not: PublisherFiltersInput
}
input PublisherInput {
  name: String
  slug: String
  games: [ID]
  publishedAt: DateTime
  locale: String
}
input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}
input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}
input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}
input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

